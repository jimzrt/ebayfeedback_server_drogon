/**
 *
 *  EbayResponse.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "EbayResponse.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::sqlite3;

const std::string EbayResponse::Cols::_ID = "ID";
const std::string EbayResponse::Cols::_USERNAME = "USERNAME";
const std::string EbayResponse::Cols::_BODY = "BODY";
const std::string EbayResponse::Cols::_TIMESTAMP = "TIMESTAMP";
const std::string EbayResponse::primaryKeyName = "ID";
const bool EbayResponse::hasPrimaryKey = true;
const std::string EbayResponse::tableName = "ebay_response";

const std::vector<typename EbayResponse::MetaData> EbayResponse::metaData_={
{"ID","uint64_t","integer",8,0,1,0},
{"USERNAME","std::string","text",0,0,0,1},
{"BODY","std::string","text",0,0,0,1},
{"TIMESTAMP","uint64_t","integer",8,0,0,1}
};
const std::string &EbayResponse::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
EbayResponse::EbayResponse(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["ID"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["ID"].as<uint64_t>());
        }
        if(!r["USERNAME"].isNull())
        {
            username_=std::make_shared<std::string>(r["USERNAME"].as<std::string>());
        }
        if(!r["BODY"].isNull())
        {
            body_=std::make_shared<std::string>(r["BODY"].as<std::string>());
        }
        if(!r["TIMESTAMP"].isNull())
        {
            timestamp_=std::make_shared<uint64_t>(r["TIMESTAMP"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 4 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            username_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            body_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            timestamp_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

EbayResponse::EbayResponse(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            body_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            timestamp_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
}

EbayResponse::EbayResponse(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("ID"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["ID"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["ID"].asUInt64());
        }
    }
    if(pJson.isMember("USERNAME"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["USERNAME"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["USERNAME"].asString());
        }
    }
    if(pJson.isMember("BODY"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["BODY"].isNull())
        {
            body_=std::make_shared<std::string>(pJson["BODY"].asString());
        }
    }
    if(pJson.isMember("TIMESTAMP"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["TIMESTAMP"].isNull())
        {
            timestamp_=std::make_shared<uint64_t>((uint64_t)pJson["TIMESTAMP"].asUInt64());
        }
    }
}

void EbayResponse::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            body_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            timestamp_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
}
                                                                    
void EbayResponse::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("ID"))
    {
        if(!pJson["ID"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["ID"].asUInt64());
        }
    }
    if(pJson.isMember("USERNAME"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["USERNAME"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["USERNAME"].asString());
        }
    }
    if(pJson.isMember("BODY"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["BODY"].isNull())
        {
            body_=std::make_shared<std::string>(pJson["BODY"].asString());
        }
    }
    if(pJson.isMember("TIMESTAMP"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["TIMESTAMP"].isNull())
        {
            timestamp_=std::make_shared<uint64_t>((uint64_t)pJson["TIMESTAMP"].asUInt64());
        }
    }
}

const uint64_t &EbayResponse::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &EbayResponse::getId() const noexcept
{
    return id_;
}
void EbayResponse::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}


void EbayResponse::setIdToNull() noexcept
{
    id_.reset();
    dirtyFlag_[0] = true;
}

const typename EbayResponse::PrimaryKeyType & EbayResponse::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &EbayResponse::getValueOfUsername() const noexcept
{
    const static std::string defaultValue = std::string();
    if(username_)
        return *username_;
    return defaultValue;
}
const std::shared_ptr<std::string> &EbayResponse::getUsername() const noexcept
{
    return username_;
}
void EbayResponse::setUsername(const std::string &pUsername) noexcept
{
    username_ = std::make_shared<std::string>(pUsername);
    dirtyFlag_[1] = true;
}
void EbayResponse::setUsername(std::string &&pUsername) noexcept
{
    username_ = std::make_shared<std::string>(std::move(pUsername));
    dirtyFlag_[1] = true;
}




const std::string &EbayResponse::getValueOfBody() const noexcept
{
    const static std::string defaultValue = std::string();
    if(body_)
        return *body_;
    return defaultValue;
}
const std::shared_ptr<std::string> &EbayResponse::getBody() const noexcept
{
    return body_;
}
void EbayResponse::setBody(const std::string &pBody) noexcept
{
    body_ = std::make_shared<std::string>(pBody);
    dirtyFlag_[2] = true;
}
void EbayResponse::setBody(std::string &&pBody) noexcept
{
    body_ = std::make_shared<std::string>(std::move(pBody));
    dirtyFlag_[2] = true;
}




const uint64_t &EbayResponse::getValueOfTimestamp() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(timestamp_)
        return *timestamp_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &EbayResponse::getTimestamp() const noexcept
{
    return timestamp_;
}
void EbayResponse::setTimestamp(const uint64_t &pTimestamp) noexcept
{
    timestamp_ = std::make_shared<uint64_t>(pTimestamp);
    dirtyFlag_[3] = true;
}




void EbayResponse::updateId(const uint64_t id)
{
}

const std::vector<std::string> &EbayResponse::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "ID",
        "USERNAME",
        "BODY",
        "TIMESTAMP"
    };
    return inCols;
}

void EbayResponse::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getBody())
        {
            binder << getValueOfBody();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTimestamp())
        {
            binder << getValueOfTimestamp();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> EbayResponse::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    return ret;
}

void EbayResponse::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getBody())
        {
            binder << getValueOfBody();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTimestamp())
        {
            binder << getValueOfTimestamp();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value EbayResponse::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["ID"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["ID"]=Json::Value();
    }
    if(getUsername())
    {
        ret["USERNAME"]=getValueOfUsername();
    }
    else
    {
        ret["USERNAME"]=Json::Value();
    }
    if(getBody())
    {
        ret["BODY"]=getValueOfBody();
    }
    else
    {
        ret["BODY"]=Json::Value();
    }
    if(getTimestamp())
    {
        ret["TIMESTAMP"]=(Json::UInt64)getValueOfTimestamp();
    }
    else
    {
        ret["TIMESTAMP"]=Json::Value();
    }
    return ret;
}

Json::Value EbayResponse::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 4)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUsername())
            {
                ret[pMasqueradingVector[1]]=getValueOfUsername();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getBody())
            {
                ret[pMasqueradingVector[2]]=getValueOfBody();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getTimestamp())
            {
                ret[pMasqueradingVector[3]]=(Json::UInt64)getValueOfTimestamp();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["ID"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["ID"]=Json::Value();
    }
    if(getUsername())
    {
        ret["USERNAME"]=getValueOfUsername();
    }
    else
    {
        ret["USERNAME"]=Json::Value();
    }
    if(getBody())
    {
        ret["BODY"]=getValueOfBody();
    }
    else
    {
        ret["BODY"]=Json::Value();
    }
    if(getTimestamp())
    {
        ret["TIMESTAMP"]=(Json::UInt64)getValueOfTimestamp();
    }
    else
    {
        ret["TIMESTAMP"]=Json::Value();
    }
    return ret;
}

bool EbayResponse::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("ID"))
    {
        if(!validJsonOfField(0, "ID", pJson["ID"], err, true))
            return false;
    }
    if(pJson.isMember("USERNAME"))
    {
        if(!validJsonOfField(1, "USERNAME", pJson["USERNAME"], err, true))
            return false;
    }
    else
    {
        err="The USERNAME column cannot be null";
        return false;
    }
    if(pJson.isMember("BODY"))
    {
        if(!validJsonOfField(2, "BODY", pJson["BODY"], err, true))
            return false;
    }
    else
    {
        err="The BODY column cannot be null";
        return false;
    }
    if(pJson.isMember("TIMESTAMP"))
    {
        if(!validJsonOfField(3, "TIMESTAMP", pJson["TIMESTAMP"], err, true))
            return false;
    }
    else
    {
        err="The TIMESTAMP column cannot be null";
        return false;
    }
    return true;
}
bool EbayResponse::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
    }
    return true;
}
bool EbayResponse::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("ID"))
    {
        if(!validJsonOfField(0, "ID", pJson["ID"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("USERNAME"))
    {
        if(!validJsonOfField(1, "USERNAME", pJson["USERNAME"], err, false))
            return false;
    }
    if(pJson.isMember("BODY"))
    {
        if(!validJsonOfField(2, "BODY", pJson["BODY"], err, false))
            return false;
    }
    if(pJson.isMember("TIMESTAMP"))
    {
        if(!validJsonOfField(3, "TIMESTAMP", pJson["TIMESTAMP"], err, false))
            return false;
    }
    return true;
}
bool EbayResponse::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    return true;
}
bool EbayResponse::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson, 
                                    std::string &err, 
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
